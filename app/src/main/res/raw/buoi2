1. Nguyên tắc làm việc với git
- Code xong 1 cái gì đó -> Commit (đặt tên commit bằng tiếng anh)
-> Push code
- Đặt tên branch cũng bằng tiếng anh (có thể dùng tiếng việt không dấu)
- Đặt tên branch:
+ Ví dụ: Anh tên là Nguyễn Đức Dũng: -> dungnd/buoi1
+ Bài tập về nhà: dungnd/btvn_buoi1
2. Gradle
- Có 2 gradle (app và project)
- Dùng để thêm thư viện, ....
- Version code: mỗi lần đẩy lên store (version code cần tăng lên 1 đơn vị)
- Bình thường sẽ dùng chế độ debug, còn khi cần đẩy lên store sẽ chuyển sang release
3. Cấu trúc project
- Android Manifest: khai báo quyền: vị trí, bộ nhớ, service, ..activity,
- Drawble: Ảnh, vecto, ...
- Layout: Để các giao diện của các màn hình, item, view
- Raw: lưu trữ các file cần thiết cho việc code, ví dụ file nhạc chuông, ...
- Font: Lưu trữ các font chữ trong ứng dụng của chúng ta (tải font trên mạng)
- Values: config các string, color, dimen(kích thước), themes, attr(thuộc tính),..
4. Lỗi build
- C1: File -> Invalid Caches -> Invalid and restart
- C2: Build -> Clean Project
5. Lỗi liên quan đến git
- Cài Github Desktop trong trường hợp gặp lỗi liên quan đến Git
hoặc Cài Source Tree để sửa các lỗi liên quan đến git
6. Debug
- Để tìm lỗi
- Xem trình tự chạy của các câu lệnh
7. Log
- Log.d("key", value)
- Log.e("key", value): cần in ra lỗi gì đó (hoặc đơn giản thích)
8. Các thành phần cơ bản
- Activity: là màn hình
9. Các Thành phần giao diện
- ViewGroup: Là thằng cha chứa các view con: FrameLayout, LiLinearLayout, Relative, Constrain
- View: TextView(hiển thị text), Button, View, Edittext(nhập text), ImageView
10. FrameLayout:
- Hiển thị các view chồng nhau- không sử dụng nhiều, chỉ sử dụng cho các view đơn giản
11. LinearLayout
- Xếp các view theo chiều dọc, chiều ngang
- android:orientation="vertical": xếp theo chiều dọc
android:orientation="horizontal": xếp theo chiều ngang
- android:layout_weight="1": định nghĩa tỉ lệ giữa các view con
12. RelativeLayout
- Trong những trường hợp giao diện không quá phức tạp -> dùng relative(Hiệu năng tốt)
- Phải gắn id cho tất cả các view bên trong
layout_below: Nằm bên dưới
layout_above: Nằm bên trên
layout_toRightOf = layout_toEndOf: nằm bên phải
layout_toLeftOf = layout_toStartOf: nằm bên trái
layout_alignParentEnd: bên phải view cha
layout_alignParentStart: bên trái view cha
layout_alignParentTop: bên trên view cha
layout_alignParentBottom: bên dưới view cha
layout_alignTop="@id/vImage4": top của 2 view bằng nhau
layout_alignStart="@id/vImage4": bên trái 2 view bằng nhau

13. ConstraintLayout
- Sử dụng khi cần vẽ nhiều view trong cùng 1 layout
layout_constraintTop_toTopOf: bên trên của view so với bên trên của view khác (hoặc so với view cha)
layout_constraintEnd_toEndOf: Bên phải của view so với bên phải của view khác
layout_constraintStart_toStartOf: Bên trái của view so với bên trái của view khác
layout_constraintBottom_toBottomOf: Bên dưới của view so với bên dưới của view khác


